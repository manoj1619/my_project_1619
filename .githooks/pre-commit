#!/bin/bash

echo "Running Pre-Commit Hook for C Coding Standards..."

# Get current branch name
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# Protected branches to enforce checks
PROTECTED_BRANCHES=("main" "master" "feature-test-precommit" "feature-test-precommit2")

# Run only on protected branches
if [[ " ${PROTECTED_BRANCHES[*]} " =~ " ${BRANCH_NAME} " ]]; then
    echo "Committing to '${BRANCH_NAME}', running checks..."

    # Check for required tools
    MISSING_TOOLS=()
    for TOOL in clang-format clang-tidy cppcheck; do
        if ! command -v "$TOOL" &>/dev/null; then
            MISSING_TOOLS+=("$TOOL")
        fi
    done

    if [ ${#MISSING_TOOLS[@]} -ne 0 ]; then
        echo "Missing tools: ${MISSING_TOOLS[*]}"
        echo "Please install them manually and retry."
        exit 1
    fi

    # Collect staged C/C++ files
    STAGED_C_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(c|h)$')

    if [ -z "$STAGED_C_FILES" ]; then
        echo "No C/C++ files staged. Skipping checks."
        exit 0
    fi

    # --- Clang-Format Check ---
    echo "Checking code formatting..."
    FORMAT_FAIL=0
    for FILE in $STAGED_C_FILES; do
        if clang-format --dry-run --Werror "$FILE" 2>/dev/null; then
            continue
        else
            # Fallback for older clang-format versions using diff
            if ! diff -q <(clang-format "$FILE") "$FILE" >/dev/null; then
                echo "Formatting issue detected in $FILE"
                FORMAT_FAIL=1
            fi
        fi
    done

    if [ $FORMAT_FAIL -ne 0 ]; then
        echo "clang-format check failed. Please format your code before committing."
        exit 1
    fi

    # --- Clang-Tidy Check ---
    if [ -f compile_commands.json ]; then
        echo "Running clang-tidy..."
        for FILE in $STAGED_C_FILES; do
            clang-tidy "$FILE" --quiet --fix-errors -p=. || {
                echo "clang-tidy failed for $FILE"
                exit 1
            }
        done
    else
        echo "Warning: compile_commands.json not found. Skipping clang-tidy."
    fi

    # --- cppcheck ---
    echo "Running cppcheck..."
    echo "$STAGED_C_FILES" | xargs cppcheck --enable=all --quiet
    if [ $? -ne 0 ]; then
        echo "cppcheck found issues."
        exit 1
    fi

    # --- Optional Python Script ---
    PYTHON_SCRIPT="c_coding_standards.py"
    if [ -f "$PYTHON_SCRIPT" ]; then
        echo "Running Python coding standards script..."
        python3 "$PYTHON_SCRIPT" $STAGED_C_FILES || {
            echo "Python coding standards script failed."
            exit 1
        }
    else
        echo "Warning: $PYTHON_SCRIPT not found. Skipping."
    fi

    echo "✅ All checks passed!"
else
    echo "⚠️  Skipping checks for branch '${BRANCH_NAME}'"
fi

exit 0

