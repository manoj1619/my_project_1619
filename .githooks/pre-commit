#!/bin/bash

echo "Running Pre-Commit Hook for C Coding Standards.."

# Get the current branch
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# Define protected branches
PROTECTED_BRANCHES=("main" "master" "feature-test-precommit" "feature-test-precommit2")

# Check if the commit is to a protected branch
if [[ " ${PROTECTED_BRANCHES[*]} " =~ " ${BRANCH_NAME} " ]]; then
    echo "Committing to '${BRANCH_NAME}', running checks..."

    # Ensure tools are installed
    MISSING_TOOLS=()
    for TOOL in clang-format clang-tidy cppcheck; do
        if ! command -v $TOOL &> /dev/null; then
            MISSING_TOOLS+=($TOOL)
        fi
    done

    if [ ${#MISSING_TOOLS[@]} -ne 0 ]; then
        echo "Missing tools: ${MISSING_TOOLS[*]}. Installing..."
        sudo apt-get install -y ${MISSING_TOOLS[*]}
    fi

    # Collect staged C/C++ files
    STAGED_C_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\.(c|h)$")
    
    if [ -z "$STAGED_C_FILES" ]; then
        echo "No C/C++ files staged. Skipping checks."
        exit 0
    fi

    echo "$STAGED_C_FILES" | xargs clang-format -i

    # Run clang-tidy if compile_commands.json exists
    if [ -f compile_commands.json ]; then
        for FILE in $STAGED_C_FILES; do
            clang-tidy "$FILE" --quiet --fix-errors -p=.
            if [ $? -ne 0 ]; then
                echo "clang-tidy failed for $FILE"
                exit 1
            fi
        done
    else
        echo "Warning: compile_commands.json not found. Skipping clang-tidy checks."
    fi

    # Run cppcheck
    echo "$STAGED_C_FILES" | xargs cppcheck --enable=all --quiet
    if [ $? -ne 0 ]; then
        echo "cppcheck found issues."
        exit 1
    fi

    # Run Python script if it exists
    PYTHON_SCRIPT="c_coding_standards.py"
    if [ -f "$PYTHON_SCRIPT" ]; then
        python3 "$PYTHON_SCRIPT" $STAGED_C_FILES
        if [ $? -ne 0 ]; then
            echo "Python coding standards script failed."
            exit 1
        fi
    else
        echo "Warning: $PYTHON_SCRIPT not found. Skipping Python checks."
    fi

    echo "All coding standard checks passed!"
else
    echo "Skipping checks for branch '${BRANCH_NAME}'."
fi

exit 0

